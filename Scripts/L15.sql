--Task01
DROP TABLE PERSON;
CREATE TABLE PERSON
(
    ID INT,
    NAME varchar2(20),
    SURNAME varchar2(25),
    CONSTRAINT PK_PERSON_ID PRIMARY KEY(ID)
);

--Task02
BEGIN
    FOR i in 1..10 LOOP
        INSERT INTO PERSON
        VALUES(i, 'Maskim' || i, 'Alekseev' || i);
    END LOOP;   
END;

SELECT * FROM PERSON;

--Task03
CREATE OR REPLACE TRIGGER PERSON_BEFORE_ALL_TRIGGER
BEFORE INSERT OR DELETE OR UPDATE ON PERSON
BEGIN
    DBMS_OUTPUT.PUT_LINE('PERSON_BEFORE_ALL_TRIGGER');
END;

--Task05 + Task06
CREATE OR REPLACE TRIGGER PERSON_BEFORE_TRIGGER_FOR_EACH_ROW
BEFORE INSERT OR DELETE OR UPDATE ON PERSON FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('PERSON_BEFORE_TRIGGER_FOR_EACH_ROW INSERT');
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('PERSON_BEFORE_TRIGGER_FOR_EACH_ROW DELETE');
    ELSIF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('PERSON_BEFORE_TRIGGER_FOR_EACH_ROW UPDATE');
    END IF;
END;


--Task07
CREATE OR REPLACE TRIGGER PERSON_AFTER_INSERT_TRIGGER
AFTER INSERT ON PERSON
BEGIN
   
    DBMS_OUTPUT.PUT_LINE('PERSON_AFTER_INSERT_TRIGGER');
END;

CREATE OR REPLACE TRIGGER PERSON_AFTER_DELETE_TRIGGER
AFTER DELETE ON PERSON
BEGIN
    
    DBMS_OUTPUT.PUT_LINE('PERSON_AFTER_DELETE_TRIGGER');
END;

CREATE OR REPLACE TRIGGER PERSON_AFTER_UPDATE_TRIGGER
AFTER UPDATE ON PERSON
BEGIN
    
    DBMS_OUTPUT.PUT_LINE('PERSON_AFTER_UPDATE_TRIGGER');
END;


--Task08
CREATE OR REPLACE TRIGGER PERSON_AFTER_INSERT_TRIGGER_FOR_EACH_ROW
AFTER INSERT ON PERSON FOR EACH ROW
BEGIN
    INSERT INTO TRIGGERS_AUDIT
    VALUES (CURRENT_DATE, 'INSERT', 
    'PERSON_AFTER_INSERT_TRIGGER_FOR_EACH_ROW',
    :OLD.ID || ' --> ' || :NEW.ID || 
    :OLD.NAME || ' --> ' || :NEW.NAME ||
    :OLD.SURNAME || ' --> ' || :NEW.SURNAME);
    DBMS_OUTPUT.PUT_LINE('PERSON_AFTER_INSERT_TRIGGER_FOR_EACH_ROW');
END;

CREATE OR REPLACE TRIGGER PERSON_AFTER_DELETE_TRIGGER_FOR_EACH_ROW
AFTER DELETE ON PERSON FOR EACH ROW
BEGIN
INSERT INTO TRIGGERS_AUDIT
    VALUES (CURRENT_DATE, 'DELETE', 
    'PERSON_AFTER_DELETE_TRIGGER_FOR_EACH_ROW',
    :OLD.ID || ' --> ' || :NEW.ID || 
    :OLD.NAME || ' --> ' || :NEW.NAME ||
    :OLD.SURNAME || ' --> ' || :NEW.SURNAME);
    DBMS_OUTPUT.PUT_LINE('PERSON_AFTER_DELETE_TRIGGER_FOR_EACH_ROW');
END;

CREATE OR REPLACE TRIGGER PERSON_AFTER_UPDATE_TRIGGER_FOR_EACH_ROW
AFTER UPDATE ON PERSON FOR EACH ROW
BEGIN
INSERT INTO TRIGGERS_AUDIT
    VALUES (CURRENT_DATE, 'UPDATE', 
    'PERSON_AFTER_UPDATE_TRIGGER_FOR_EACH_ROW',
    :OLD.ID || ' --> ' || :NEW.ID || 
    :OLD.NAME || ' --> ' || :NEW.NAME ||
    :OLD.SURNAME || ' --> ' || :NEW.SURNAME);
    DBMS_OUTPUT.PUT_LINE('PERSON_AFTER_UPDATE_TRIGGER_FOR_EACH_ROW');
END;


--Task09
DROP TABLE TRIGGERS_AUDIT;
CREATE TABLE TRIGGERS_AUDIT
(
    OPERATION_DATE date,
    OPERATION_TYPE varchar2(10),
    TRIGGER_NAME varchar2(50),
    DATA varchar2(100)
);

SELECT * FROM TRIGGERS_AUDIT;


--Task10


--Task11
INSERT INTO PERSON VALUES (11, 'M', 'A');